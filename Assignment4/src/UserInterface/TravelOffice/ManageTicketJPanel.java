/*
 * HappyLamb - TravelAgencySystem
 * Each line should be prefixed with  * 
 */
package UserInterface.TravelOffice;

import Business.Ticket.Ticket;
import Business.TravelOffice.Customer.Customer;
import Business.TravelOffice.TravelOffice;
import java.awt.CardLayout;
import java.util.List;
import java.util.stream.Collectors;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author gaomc
 */
public class ManageTicketJPanel extends javax.swing.JPanel {

    
    private TravelOffice travelOffice;
    private List<Ticket> ticketList;
    JPanel cardSequenceJPanel;
    /**
     * Creates new form ManegePandingTicket
     */
    public ManageTicketJPanel(JPanel cardSequenceJPanel, TravelOffice travelOffice) {
        initComponents();
        this.travelOffice = travelOffice;
        this.cardSequenceJPanel = cardSequenceJPanel;
        this.ticketList = travelOffice.getTicketDirectory().getTicketList();
        populate(this.ticketList);
        
    }

    public void populate(List<Ticket> ticketList){
        DefaultTableModel dtm = (DefaultTableModel)ticketJTable.getModel();
        dtm.setRowCount(0);
        
        ticketList.forEach((Ticket ticket) -> {
            Object[] row = new Object[dtm.getColumnCount()];
            row[0] = ticket;
            row[1] = ticket.getFlightNumber();
            row[2] = ticket.getSeatInfo();
            row[3] = ticket.getFlight().getDate();
            row[4] = ticket.getAirplaneInfo();
            row[5] = ticket.getCustomerInfo();
            row[6] = ticket.isPending();
                    
            dtm.addRow(row);
        });
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        ticketJTable = new javax.swing.JTable();
        checkPendingTicketBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        backBtn = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        ticketJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Ticket #", "Flight", "Seat #", "Date", "Airliner", "Customer", "Pending"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(ticketJTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, 660, 240));

        checkPendingTicketBtn.setText("Check all Pending Ticket");
        checkPendingTicketBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkPendingTicketBtnActionPerformed(evt);
            }
        });
        add(checkPendingTicketBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 370, -1, -1));

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel1.setText("Ticket List");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 50, -1, -1));

        backBtn.setText("Back ");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });
        add(backBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 410, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        cardSequenceJPanel.remove(this);
        CardLayout layout = (CardLayout) cardSequenceJPanel.getLayout();
        layout.previous(cardSequenceJPanel);
    }//GEN-LAST:event_backBtnActionPerformed

    private void checkPendingTicketBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkPendingTicketBtnActionPerformed
        // TODO add your handling code here:
        List<Ticket> pendingTicket = 
                this.ticketList.stream()
                        .filter(ticket -> ticket.isPending() == true)
                        .collect(Collectors.toList());
                
        populate(pendingTicket);
    }//GEN-LAST:event_checkPendingTicketBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JButton checkPendingTicketBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable ticketJTable;
    // End of variables declaration//GEN-END:variables
}
